1、错误：cannot restore segment prot after reloc: Permission denied
解决方案：出错原因在于selinux禁用了访问此共享库，一般在安装完成之后还需要关闭selinux，操作如下：
①编辑/etc/selinux/config文件，找到SELINUX=enforcing，改为SELINUX=disabled
②编辑/etc/sysconfig/selinux文件，找到SELINUX=enforcing，改为SELINUX=disabled
③重启电脑（reboot）

2、所谓一个服务（假设为serv）的重启，有2种对应的操作，要么就是serv restart，要么就是kill serv，再serv start，当然在强制终止某个进程时还需要获得它的pid，可以用ps命令查看

3、注意在数据库启动时会在某个端口上监听，以mysql数据库为例，mysql的监听端口为3306.因此在重装mysql数据库若之前安装的mysql数据库进程没有被kill掉，那么新安装的mysql在3306上监听时就会报出“端口可能被其他进程占用”的错误，从而无法正确安装mysql，一旦出错最好的方法是查mysql的错误日志，根据错误日志中提示的信息作出修改，然后再重新安装或者重启服务就可以了。而mysql的错误日志可以由mysqld启动时附加的“--log-error=/opt/avcon/mysql/data/ricci.huaping.err”这一项知道错误日志为ricci.huaping.err。通常在安装Linux应用之后，如果觉得存在某些问题需要重装应用，一般都需要先kill掉这个应用对应的进程，然后再重装，否则会出现很多问题。

4、错误：mysql -hlocalhost -uavmc -pAvMc登录时提示缺少共享库libmysqlclient.so.16。之前先装了6.2版本的中心服务（包括其中的mysql部分），后来为了装7.1版本的server，就把/opt目录下的整个avcon目录都删除了。结果安装完提示出现这个错误，根据猜测，在这个中心服务包中安装的mysql数据库应该包含2个部分，一个是mysql引擎，还有一个就是存储具体数据（表、记录）的数据文件，而这个mysql引擎应该是从整个mysql应用中裁剪下来的，并且在安装过程中，除了把必须的文件拷贝到/opt/avcon目录下，有可能还把文件(bin、lib等)拷贝到其他的系统目录中（可能出现覆盖、替换等等情况），这个具体要看和mysql安装有关的脚本。
解决方案：whereis mysql查看mysql命令具体所在的目录，后来发现如果直接在命令行上运行这个命令，shell是直接到/usr/sbin目录下去找这个文件。继续ldd /usr/sbin/mysql发现在有关共享库中缺少libmysqlclient.so.16，一种方法是下载libmysqlclient.so.16（网上下载，我是直接向老段要的，scp到我虚拟机里面就ok了），然后把这个文件放在/usr/lib/mysql目录下，发现不行，说明mysql不是去这个路径下找共享库文件的，后来直接cp到/lib目录下，service restart一下，发现文件找到了，但是又出现了一个新的问题，网上搜索了一下，这个问题又和mysql的系统数据表有关，而且很难解决，所以这个办法就被pass掉了，第二种方法是直接替换/usr/sbin目录下所有的mysql*文件，把/opt/avcon/mysql/bin目录下的所有mysql* cp到/usr/sbin目录下，强制替换，结果使用上述命令就成功登陆了！

在使用yum install安装包的时候不需要指定安装路径，它是按照默认方式进行安装的。一般会将安装包中的配置文件放置在/etc目录下，可执行文件可能用到的共享库会安装在/lib或者/usr/lib目录下，文档和参考手册会放置在/usr/share/doc和/usr/share/man目录下，而可执行文件本身则放置在/usr/bin目录下。
通过yum安装的软件包，可以通过 "rpm -ql 软件包名" 来查询这个软件包具体复制了哪些文件到哪些地方。

通过源码来安装某个应用时，会在解压缩目录下有一个configure脚本，通常是带一系列的参数执行这个configure脚本来生成Makefile文件，有了Makefile文件接着就可以make && make install来完成应用的安装，configure可以附带的参数可以通过./configure --help这个命令打印出，一般都会通过./configure --prefix=/installdir来指定将这个应用安装在/installdir目录下，./configure --with-debug则指定在生成这个应用时附带调试信息，其他参数在用到时可以使用help去查

在windows上编译应用程序时vs会安排好一切，然而在Linux上编译程序时什么都要自己准备。当然编译一个大型的应用需要准备的也就几块：include目录（放置头文件），lib目录（导入库/静态库/动态库），自己的header/source文件，（配置文件/授权文件），当然一个大型的工程肯定会有自己的Makefile来进行自动化编译。一般而言上述这几块准备好了也就可以make了（一个标准的Makefile可以在这个目录中找到，可以作为例子参考借鉴和学习），关于Makefile就不说更多的了，网上随便找一下就可以找到很详细的介绍。以上所需的都有了，但make还是报错，那就说明系统里面缺少开发库，比如在自己的虚拟机下编译时老提示说：“../../include/KBASE/KXMLElementStream.h:8:19: 错误：expat.h：没有那个文件或目录”。后来根据expat.h搜索了一下发现是一个应用开发库，由于CentOS自带软件包管理器，在这里根据expat搜索找到一个“expat-devel-1.95.8-11.el5_8.i386”[用expat来开发应用程序的库和包含文件]，抱着尝试的态度安装了一下，再到Makefile目录下make编译发现编译通过，确实就是少了这个expat库

项目在Linux编译之后链接时通常会找.lib或者.so这样的静态/动态链接库，而这些链接库是根据配置文件/etc/ld.so.conf中设置的路径来寻找的。在/etc/ld.so.conf文件中设置好链接库的存放路径后通常需要使用ldconfig命令，以使这个设置生效
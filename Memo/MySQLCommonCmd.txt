前注：使用Navicat for MySQL可以在windows上远程登录安装在Linux上的mysql数据库，连接名/主机名/IP地址都填写为安装mysql数据库的Linux OS的ip地址即可，用户名和密码则填写为登录mysql数据库时所用的用户名和密码，一般的开发者不用管理登录名和密码，也不用关心数据库的创建，开发者最关心的是和应用关联的表，也即为了开发这个应用我需要创建哪些表，这些表中有些什么字段，这些表之间的关系式什么，其他的像什么权限管理，数据备份，加快检索等是dba的任务

常用命令：
mysql数据库登录命令mysql -h(后接localhost或者远程ip地址) -u(用户名) -p(密码) 例如：mysql -hlocalhost -uavmc -pAvMc
登录数据库之后可使用show databases;命令查看mysql当前拥有的数据库，使用use avmcdb;命令表示使用avmcdb这个数据库，即进入这个数据库中，接着就可以使用show tables;命令查看avmcdb数据库中拥有哪些表

Order by desc/asc limit M是在mysql sql优化中经常遇到的一种场景，其优化原理非常的简单：就是利用索引的有序性，优化器沿着索引的顺序扫描，在扫描到符合条件的M行数据后，停止扫描；
总结：
Order by desc/asc limit的优化技术有时候在你无法建立很好索引的时候，往往会得到意想不到的优化效果，但有时候有一定的局限性，优化器可能不会按照你既定的索引路径扫描，优化器需要考虑到查询列的过滤性以及limit的长度，当查询列的选择性非常高的时候，使用sort的成本是不高的，当查询列的选择性很低的时候，那么使用order by +limit的技术是很有效的。
关于这个sql优化的案例参考 http://hidba.org/?p=743 

having的用法
having字句可以让我们筛选成组后的各种数据，where字句在聚合前先筛选记录，也就是说作用在group by和having字句前。而 having子句在聚合后对组记录进行筛选。
作用的对象不同。WHERE 子句作用于表和视图，HAVING 子句作用于组。
WHERE 在分组和聚集计算之前选取输入行（因此，它控制哪些行进入聚集计算）， 而 HAVING 在分组和聚集之后选取分组的行。因此，WHERE 子句不能包含聚集函数； 因为试图用聚集函数判断那些行输入给聚集运算是没有意义的。 相反，HAVING 子句总是包含聚集函数。（严格说来，你可以写不使用聚集的 HAVING 子句， 但这样做只是白费劲。同样的条件可以更有效地用于 WHERE 阶段。）
使用having的sql例子可以参考 http://hi.baidu.com/ww999/item/849c72e45518970d8c3ea8cf 。